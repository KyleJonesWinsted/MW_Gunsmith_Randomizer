{"version":3,"sources":["components/attachment.component.js","components/gunsmith.component.js","App.js","serviceWorker.js","index.js"],"names":["Attachment","className","this","props","attachment","slot","name","Component","Gunsmith","state","gun_id","gun_name","gun_imgUrl","gun_rank","attachments","getNewGun","bind","getAttachments","rerollAttachments","attachmentsList","onChangeGunRank","playerRank","url","fetch","response","ok","json","Promise","resolve","Error","console","log","reject","gunId","length","push","rankUnlocked","imgUrl","setState","alert","gun","_id","map","currentAttachment","i","key","e","target","value","src","alt","htmlFor","id","type","onChange","onClick","componentDidMount","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5c2b1697.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass Attachment extends Component {\n\n    render() {\n        return(\n            <div className=\"attachment-row\">\n                <p className=\"attachment-slot\">{this.props.attachment.slot}</p>\n                <p className=\"attachment-name\">{this.props.attachment.name}</p>\n            </div>\n        )\n    }\n}\n\nexport default Attachment","import React, { Component } from 'react'\nimport Attachment from './attachment.component'\n\nclass Gunsmith extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            gun_id: \"\",\n            gun_name: \"\",\n            gun_imgUrl: \"\",\n            gun_rank: 100,\n            attachments: []\n        }\n\n        this.getNewGun = this.getNewGun.bind(this)\n        this.getAttachments = this.getAttachments.bind(this)\n        this.rerollAttachments = this.rerollAttachments.bind(this)\n        this.attachmentsList = this.attachmentsList.bind(this)\n        this.onChangeGunRank = this.onChangeGunRank.bind(this)\n    }\n\n    async getNewGun(playerRank = 55) {\n        const url = \"http://localhost:4000/gun/random/\" + playerRank\n        try {\n            const response = await fetch(url)\n            if (response.ok) {\n                const json = await response.json()\n                return Promise.resolve(json)\n            }\n            throw new Error('Unable to get new gun')\n        } catch(error) {\n            console.log(error)\n            return Promise.reject(error)\n        }\n    }\n\n    async getAttachments(gunId) {\n        if (!gunId) {\n            return\n        }\n        const url = \"http://localhost:4000/attachments/\" + gunId + '/' + this.state.gun_rank\n        try {\n            const response = await fetch(url)\n            if (response.ok) {\n                const json = await response.json()\n                while (json.length < 5) {\n                    json.push({\n                        name: \"-\",\n                        gunId: \"\",\n                        rankUnlocked: 100,\n                        imgUrl: \"\",\n                        slot: \"-\"\n                    })\n                }\n                return Promise.resolve(json)\n            }\n            throw new Error('Unable to get attachments.')\n        } catch(error) {\n            console.log(error)\n            return Promise.reject(error)\n        }\n    }\n\n    async rerollAttachments() {\n        try {\n            const attachments = await this.getAttachments(this.state.gun_id)\n            this.setState({\n                attachments: attachments\n            })\n        } catch(error) {\n            console.log(error)\n            alert(error)\n        }\n    }\n\n    async componentDidMount() {\n        try {\n            const gun = await this.getNewGun()\n            const attachments = await this.getAttachments(gun._id)\n            this.setState({\n                gun_id: gun._id,\n                gun_name: gun.name,\n                gun_imgUrl: gun.imgUrl,\n                gun_rank: 100,\n                attachments: attachments\n            })\n        } catch(error) {\n            console.log(error)\n            alert(error)\n        }\n    }\n\n    attachmentsList() {\n        return this.state.attachments.map((currentAttachment, i) => {\n            return <Attachment attachment={currentAttachment} key={i} />\n        })\n    }\n\n    onChangeGunRank(e) {\n        this.setState({\n            gun_rank: e.target.value\n        })\n    }\n    \n    render() {\n        return(\n            <div className=\"gunsmith\">\n                <h1 className=\"gunsmith-title\">{ this.state.gun_name } Gunsmith</h1>\n                <div className=\"gunsmith-flex\">\n                    <div className=\"attachments\">\n                        <div>{ this.attachmentsList() }</div>\n                    </div>\n                    <div className=\"gun\">\n                        <div className=\"gun-img-frame\">\n                            <img className=\"gun-img\" src={this.state.gun_imgUrl} alt={this.state.gun_name} />\n                            <h3 className=\"gun-title\">{ this.state.gun_name }</h3>\n                        </div>\n                        <div className=\"controls\">\n                            <label htmlFor=\"gunRank\" id=\"gun-rank-label\">Gun Rank:</label>\n                            <input type=\"number\" name=\"gunRank\" id=\"gun-rank-input\" value={this.state.gun_rank} onChange={this.onChangeGunRank} />\n                            <button id=\"new-attachments-button\" onClick={this.rerollAttachments}>New Attachments</button>\n                            <br />\n                            <button id=\"reroll-button\" onClick={this.componentDidMount.bind(this)}>Reroll</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Gunsmith","import React, { Component } from 'react';\nimport './App.css';\nimport Gunsmith from './components/gunsmith.component'\n\nclass App extends Component {\n\n  render() {\n    return(\n      <Gunsmith />\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}